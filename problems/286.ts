// 286. Walls and Gates

console.clear()

function wallsAndGates(rooms: number[][]): void {
  let queue: { col: number, row: number, steps: number }[] = []

  const isValidPosition = (col: number, row: number) => {
    if (
      rooms[col]?.[row] === 2147483647
    ) {
      return true
    }

    return false
  }

  const treverse = (col: number, row: number, steps: number) => {
    if (isValidPosition(col, row)) {
      rooms[col][row] = steps + 1
      queue.push({ col, row, steps: steps + 1 })
    }
  }

  for (let col = 0; col < rooms.length; col++) {
    for (let row = 0; row < rooms[0].length; row++) {
      if (rooms[col][row] === 0) {
        queue.push({ col, row, steps: 0 })
      }
    }
  }

  while (queue.length) {
    const batch = [...queue]
    queue = []

    batch.forEach(({ col, row, steps }) => {
      treverse(col - 1, row, steps) // up
      treverse(col, row + 1, steps) // right
      treverse(col + 1, row, steps) // down
      treverse(col, row - 1, steps) // left
    })
  }

  console.log(rooms)
}

console.log(wallsAndGates([[2147483647, -1, 0, 2147483647], [2147483647, 2147483647, 2147483647, -1], [2147483647, -1, 2147483647, -1], [0, -1, 2147483647, 2147483647]]))
console.log(wallsAndGates([[-1]]))
console.log(wallsAndGates([[2147483647]]))
console.log(wallsAndGates([[-1, 0, 2147483647, 2147483647, 0, 0, 2147483647, 2147483647, -1, 0, 0, -1, -1, 2147483647, -1, -1, 2147483647, 2147483647, 2147483647, 0, 0, -1, 2147483647, -1, -1, -1, 0, 2147483647, 0, 0, 0, -1, 2147483647, 0, 0, 2147483647, -1, -1, 0, 0, -1, 0, 2147483647, 2147483647, -1, 2147483647], [0, -1, 0, -1, 0, 0, 0, -1, -1, 0, -1, 2147483647, 2147483647, -1, 2147483647, -1, 2147483647, -1, -1, 2147483647, 0, -1, 2147483647, 0, 2147483647, 0, -1, 2147483647, 0, -1, -1, 2147483647, 0, 2147483647, 0, 2147483647, -1, 2147483647, 2147483647, 2147483647, -1, 0, -1, 2147483647, 0, 2147483647], [2147483647, -1, -1, 2147483647, 0, 0, 0, 2147483647, -1, 0, -1, -1, 2147483647, 2147483647, 2147483647, 2147483647, -1, 2147483647, 0, 0, 2147483647, 0, -1, 0, 0, 2147483647, 2147483647, 0, 0, 2147483647, -1, -1, 0, 2147483647, 0, 2147483647, -1, -1, 2147483647, 2147483647, 0, -1, 2147483647, -1, -1, -1], [2147483647, -1, -1, 2147483647, 0, -1, -1, -1, -1, -1, 0, -1, -1, 2147483647, 0, -1, -1, -1, 2147483647, 2147483647, -1, 2147483647, -1, -1, -1, 0, -1, -1, 0, -1, 0, -1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 0, 0, 2147483647, 2147483647, 2147483647, 2147483647, 0, 2147483647, 2147483647], [2147483647, 2147483647, 2147483647, -1, -1, 2147483647, 2147483647, -1, 0, 2147483647, -1, 0, 0, 2147483647, 2147483647, 0, 2147483647, -1, -1, 2147483647, 0, 0, 0, -1, 2147483647, 0, 2147483647, -1, 2147483647, 0, 0, -1, 0, 2147483647, -1, 0, -1, -1, 2147483647, -1, 0, 0, -1, -1, -1, -1], [-1, -1, 2147483647, 2147483647, 0, 2147483647, 0, 0, 2147483647, 2147483647, 0, -1, 0, 2147483647, -1, 2147483647, 2147483647, 0, 2147483647, 2147483647, -1, 0, 0, 2147483647, -1, -1, 0, -1, 2147483647, 0, 0, 0, 0, 0, 2147483647, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1]]))


